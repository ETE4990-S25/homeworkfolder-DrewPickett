import docker
import time
from datetime import datetime, timezone

client = docker.from_env()

def list_running_containers():
    containers = client.containers.list(all=True)
    for container in containers:
        print(f"{container.name} - {container.status}")

def show_container_ip(container_name):
    container = client.containers.get(container_name)
    networks = container.attrs['NetworkSettings']['Networks']
    
    for net_name, net_data in networks.items():
        if net_data['IPAddress']:
            print(f"{container_name} in network '{net_name}' has IP: {net_data['IPAddress']}")
        else:
            print(f"{container_name} in network '{net_name}' has no IP")

def relaunch_containers():
    containers = client.containers.list(all=True)
    if not containers:
        print("No containers to relaunch.")
        return
    
    for container in containers:
        if container.status == 'exited':
            print(f"Relaunching {container.name}")
            container.restart()

def maintenance_restart_containers():
    containers = client.containers.list(all=True)
    if not containers:
        print("No containers to restart.")
        return
    
    for container in containers:
        container_time_string = container.attrs['State']['StartedAt'][:19]
        container_time_object = datetime.strptime(container_time_string, "%Y-%m-%dT%H:%M:%S").replace(tzinfo=timezone.utc)
        start_time = container_time_object.timestamp()
        current_time = time.time()
        print(f"{container.name} uptime: {current_time - start_time:.2f} seconds")
        #I had to research how to code lines 34 - 38 to properly extract the time data from the docker containers and format it

        if current_time - start_time >= 86400:
            print(f"Performing Maintenance Restart on {container.name}")
            container.restart()

def main():     
    list_running_containers()
    show_container_ip("adminer")
    show_container_ip("mysql")
    relaunch_containers()
    maintenance_restart_containers()

if __name__ == "__main__":
    main()